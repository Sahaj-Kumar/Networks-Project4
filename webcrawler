#!/usr/bin/python -u
# CS3700
# Project 4

import sys
import urlparse
import socket
from HTMLParser import HTMLParser
from lxml import html

SEEN = []
FRONTIER = []
FLAGS = []

class MyHTMLParser(HTMLParser):

  def handle_starttag(self, tag, attrs):
    if tag == 'input' and attrs[1] == ('name', 'csrfmiddlewaretoken'):
      # set csrf token
      global csrf_token 
      csrf_token = attrs[2][1]
    elif tag == 'a':
      link = attrs[0][1]
      if (link is not None
        and link not in SEEN and link not in FRONTIER and '/fakebook/' in link):
        # add new link to frontier
        FRONTIER.append(link)
 
  def handle_data(self, data):
    if "FLAG" in data:
      flag = data[6:]
      # print and save flag
      if flag not in FLAGS:
        print(flag)
        FLAGS.append(flag)

username = sys.argv[1]
password = sys.argv[2]
LOGIN_PAGE = "http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/"
HOME_PAGE = "http://fring.ccs.neu.edu/fakebook/"

HTML_PARSER = MyHTMLParser()

csrf_token = None
session_ID = None

# html get request given url
def get(url):
  parsed_url = urlparse.urlparse(url)
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect((parsed_url.netloc, 80))

  sock.send("GET " + parsed_url.path + " HTTP/1.1" + "\n" + "Host: " + parsed_url.netloc + "\n" + getCookies() + "\r\n\r\n")

  received = sock.recv(100000)

  sock.close()
  return received

# html post request given url
def post(url, content):

  parsed_url = urlparse.urlparse(url)

  post_msg = "POST " + parsed_url.path + "?next=/fakebook/" + " HTTP/1.1" + "\nHost: " + parsed_url.netloc
  content_length = "Content-Length: " + str(len(content))
  content_type = "Content-Type: application/x-www-form-urlencoded"
  cookie = getCookies()
  #print(cookie) 
  
  whole_post = post_msg + "\r\n" + cookie + "\r\n" + content_type + "\r\n" + content_length + "\r\n\r\n" + content

  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect((parsed_url.netloc, 80))

  sock.send(whole_post)

  received = sock.recv(100000)
  sock.close()
  return received


def getCookies():
  cookie = "Cookie: "
  temp = False
  if csrf_token is not None:
    cookie += "csrftoken=" + csrf_token
    temp = True
  
  if session_ID is not None:
    if temp:
      cookie += "; sessionid=" + session_ID

  return cookie

# get login page
result = get(LOGIN_PAGE)

# parse for token
HTML_PARSER.feed(result)

content = "username=" + username + "&password=" + password + "&csrfmiddlewaretoken=" + csrf_token + "&next=/fakebook/"

# post request with login credentials
result2 = post(LOGIN_PAGE, content)

# parse sessionID
sessionIDtemp = result2.split("\n")[7].split(" ")[1]
session_ID = sessionIDtemp[10:len(sessionIDtemp) - 1]

# requesr home page
home = get(HOME_PAGE)

# parse for initial links
HTML_PARSER.feed(home)

# crawl until all flags are received
while len(FLAGS) < 5 and FRONTIER:
  site = FRONTIER[0]
  
  result = get("http://fring.ccs.neu.edu" + site)

  status_code = result[9:12]  

  if status_code == "200": 
    HTML_PARSER.feed(result)

    FRONTIER.remove(site)
    SEEN.append(site)
  elif status_code == "403" or status_code == "404":
    # error, abandon URL
    FRONTIER.remove(site)
    SEEN.append(site)
  elif status_code == "500":
    # retry request
    pass
  elif status_code == "301":
    # get redirect url
    line_split = result.split("\n")
    for line in line_split:
      word_split = line.split(" ")
      if word[0] == "Location:":
        FRONTIER.append(word[1])
        FRONTIER.remove(site)
        SEEN.append(site)
        break






