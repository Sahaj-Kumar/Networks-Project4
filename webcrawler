#!/usr/bin/python -u
# CS3700
# Project 4

import sys
import urlparse
import socket
from HTMLParser import HTMLParser
from lxml import html

print("Hello world!")

SEEN = []
FRONTIER = []
FLAGS = []

class MyHTMLParser(HTMLParser):

  def handle_starttag(self, tag, attrs):
    if tag == 'input' and attrs[1] == ('name', 'csrfmiddlewaretoken'):
      #print("The code is: " + attrs[2][1])
      global csrf_token 
      csrf_token = attrs[2][1]
    elif tag == 'a':
      link = attrs[0][1]
      if link not in SEEN and link not in FRONTIER and '/fakebook/' in link:
        #print("new link!: " + link)
        FRONTIER.append(link)
    #else:
    #  print("Encountered a start tag: " + tag + ", atts: " + str(attrs))
 
  def handle_data(self, data):
    if "FLAG" in data:
      flag = data[6:]
      print(flag)
      FLAGS.append(flag)

username = sys.argv[1]
password = sys.argv[2]
LOGIN_PAGE = "http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/"
HOME_PAGE = "http://fring.ccs.neu.edu/fakebook/"


HTML_PARSER = MyHTMLParser()

#TODO add bad links


csrf_token = None
session_ID = None

def GET(url):
  #global sock

  parsed_url = urlparse.urlparse(url)
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect((parsed_url.netloc, 80))

  #print("In GET: " + path + " | " + host)
  sock.send("GET " + parsed_url.path + " HTTP/1.1" + "\n" + "Host: " + parsed_url.netloc + "\n" + getCookies() + "\r\n\r\n")

  received = sock.recv(100000)

  sock.close()
  return received

def POST(url, content):

  parsed_url = urlparse.urlparse(url)

  post_msg = "POST " + parsed_url.path + "?next=/fakebook/" + " HTTP/1.1" + "\nHost: " + parsed_url.netloc
  content_length = "Content-Length: " + str(len(content))
  content_type = "Content-Type: application/x-www-form-urlencoded"
  #connection = keep-alive
  cookie = getCookies()
  print(cookie) 
  
  whole_post = post_msg + "\r\n" + cookie + "\r\n" + content_type + "\r\n" + content_length + "\r\n\r\n" + content

  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect((parsed_url.netloc, 80))

  sock.send(whole_post)

  received = sock.recv(100000)
  sock.close()
  return received


def getCookies():
  cookie = "Cookie: "
  temp = False
  if csrf_token is not None:
    cookie += "csrftoken=" + csrf_token
    temp = True
  
  if session_ID is not None:
    if temp:
      cookie += "; sessionid=" + session_ID
    #else:
    #  cookie += "sessionid=" + session_ID

  return cookie

result = GET(LOGIN_PAGE)
print(result)

split_result = result.split("\r\n")

print(result)
HTML_PARSER.feed(result)
print(csrf_token)

content = "username=" + username + "&password=" + password + "&csrfmiddlewaretoken=" + csrf_token + "&next=/fakebook/"

result2 = POST(LOGIN_PAGE, content)
print(result2)

sessionIDtemp = result2.split("\n")[7].split(" ")[1]
session_ID = sessionIDtemp[10:len(sessionIDtemp) - 1]
 
print(session_ID)


foo = GET(HOME_PAGE)
print(foo)
#foo = sock.recv(100000)
HTML_PARSER.feed(foo)

print(FRONTIER)

while len(FLAGS) < 5 and FRONTIER:
  site = FRONTIER[0]
  
  result = GET("http://fring.ccs.neu.edu" + site)
  HTML_PARSER.feed(result)

  FRONTIER.remove(site)



